// Code generated by go-swagger; DO NOT EDIT.

package kardex

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RegisterKardexHandlerFunc turns a function with the right signature into a register kardex handler
type RegisterKardexHandlerFunc func(RegisterKardexParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RegisterKardexHandlerFunc) Handle(params RegisterKardexParams) middleware.Responder {
	return fn(params)
}

// RegisterKardexHandler interface for that can handle valid register kardex params
type RegisterKardexHandler interface {
	Handle(RegisterKardexParams) middleware.Responder
}

// NewRegisterKardex creates a new http.Handler for the register kardex operation
func NewRegisterKardex(ctx *middleware.Context, handler RegisterKardexHandler) *RegisterKardex {
	return &RegisterKardex{Context: ctx, Handler: handler}
}

/*RegisterKardex swagger:route POST /inventory/kardex kardex registerKardex

Register a new kardex

Register a new kardex to the inventory

*/
type RegisterKardex struct {
	Context *middleware.Context
	Handler RegisterKardexHandler
}

func (o *RegisterKardex) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRegisterKardexParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
