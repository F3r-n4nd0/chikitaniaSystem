// Code generated by go-swagger; DO NOT EDIT.

package purchase

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PlacePurchaseHandlerFunc turns a function with the right signature into a place purchase handler
type PlacePurchaseHandlerFunc func(PlacePurchaseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PlacePurchaseHandlerFunc) Handle(params PlacePurchaseParams) middleware.Responder {
	return fn(params)
}

// PlacePurchaseHandler interface for that can handle valid place purchase params
type PlacePurchaseHandler interface {
	Handle(PlacePurchaseParams) middleware.Responder
}

// NewPlacePurchase creates a new http.Handler for the place purchase operation
func NewPlacePurchase(ctx *middleware.Context, handler PlacePurchaseHandler) *PlacePurchase {
	return &PlacePurchase{Context: ctx, Handler: handler}
}

/*PlacePurchase swagger:route POST /inventory/purchase purchase placePurchase

Place a purchase

*/
type PlacePurchase struct {
	Context *middleware.Context
	Handler PlacePurchaseHandler
}

func (o *PlacePurchase) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPlacePurchaseParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
