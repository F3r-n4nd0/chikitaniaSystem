// Code generated by go-swagger; DO NOT EDIT.

package purchase

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ReturnPurchaseHandlerFunc turns a function with the right signature into a return purchase handler
type ReturnPurchaseHandlerFunc func(ReturnPurchaseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReturnPurchaseHandlerFunc) Handle(params ReturnPurchaseParams) middleware.Responder {
	return fn(params)
}

// ReturnPurchaseHandler interface for that can handle valid return purchase params
type ReturnPurchaseHandler interface {
	Handle(ReturnPurchaseParams) middleware.Responder
}

// NewReturnPurchase creates a new http.Handler for the return purchase operation
func NewReturnPurchase(ctx *middleware.Context, handler ReturnPurchaseHandler) *ReturnPurchase {
	return &ReturnPurchase{Context: ctx, Handler: handler}
}

/*ReturnPurchase swagger:route POST /inventory/purchase/return purchase returnPurchase

Return on purchase

*/
type ReturnPurchase struct {
	Context *middleware.Context
	Handler ReturnPurchaseHandler
}

func (o *ReturnPurchase) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReturnPurchaseParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
